import sys
import pygame
from pygame.locals import *

go_text_color_change_timer = 0
left_ellipse_timer = 0
right_ellipse_timer = 0
rest_rect_timer = 0

def update(dt):
    global go_text_color_change_timer, left_ellipse_timer, right_ellipse_timer, rest_rect_timer

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                # Start the timer for the "GO" ellipse
                go_text_color_change_timer = 10
            elif event.key == pygame.K_LEFT:
                # Start the timer for the left ellipse
                left_ellipse_timer = 10
            elif event.key == pygame.K_RIGHT:
                # Start the timer for the right ellipse
                right_ellipse_timer = 10
            elif event.key == pygame.K_RETURN:
                # Start the timer for the "REST" rectangle
                rest_rect_timer = 10

    # Decrement timers
    if go_text_color_change_timer > 0:
        go_text_color_change_timer -= dt
    if left_ellipse_timer > 0:
        left_ellipse_timer -= dt
    if right_ellipse_timer > 0:
        right_ellipse_timer -= dt
    if rest_rect_timer > 0:
        rest_rect_timer -= dt




def show_text(screen, text, position, font_size = 80, color = (255, 255, 255)):
    font = pygame.font.SysFont("Times New Roman", font_size, True, False)
    surface = font.render(text, True, color)
    screen.blit(surface, position)

def show_buttons_text(screen, text, position, font_size = 20, color = (255, 255, 255)):
    font = pygame.font.SysFont("Times New Roman", font_size, True, False)
    surface = font.render(text, True, color)
    screen.blit(surface, position)

def draw_arrowhead_l(screen, color, start_pos, end_pos, size):
    # Calculate the direction vector and normalize it
    direction_l = pygame.math.Vector2(end_pos) - pygame.math.Vector2(start_pos)
    direction_l = direction_l.normalize()

    # Perpendicular vector to the direction
    perp_direction = pygame.math.Vector2(-direction_l.y, direction_l.x)

    # Define the points of the triangle relative to the end_pos
    point1 = pygame.math.Vector2(end_pos)
    side_length = size / (3 ** 0.5)  # Calculate the side length of the triangle
    point2 = point1 - direction_l * size + perp_direction * side_length
    point3 = point1 - direction_l * size - perp_direction * side_length

    # Draw the triangle
    pygame.draw.polygon(screen, color, [point1, point2, point3])

def draw_arrowhead_r(screen, color, start_pos, end_pos, size):
    # Calculate the direction vector and normalize it
    direction_r = pygame.math.Vector2(start_pos) - pygame.math.Vector2(end_pos)
    direction_r = direction_r.normalize()

    # Perpendicular vector to the direction
    perp_direction = pygame.math.Vector2(-direction_r.y, direction_r.x)

    # Define the points of the triangle relative to the end_pos
    point1 = pygame.math.Vector2(end_pos)
    side_length = size / (3 ** 0.5)  # Calculate the side length of the triangle
    point2 = point1 - direction_r * size + perp_direction * side_length
    point3 = point1 - direction_r * size - perp_direction * side_length

    # Draw the triangle
    pygame.draw.polygon(screen, color, [point1, point2, point3])

def draw(screen):
    global go_text_color_change_timer, left_ellipse_timer, right_ellipse_timer, rest_rect_timer  # Make sure these are accessible

    # Background
    screen.fill((255, 255, 255))
    blue = pygame.Color("#284387")

    # Determine colors based on timers
    left_ellipse_color = (0, 255, 0) if left_ellipse_timer > 0 else (220, 220, 220)
    right_ellipse_color = (0, 255, 0) if right_ellipse_timer > 0 else (220, 220, 220)
    rest_rect_color = (blue) if rest_rect_timer > 0 else (220, 220, 220)
    go_ellipse_color = (0, 255, 0) if go_text_color_change_timer > 0 else (220, 220, 220)  # Color for "GO" ellipse
    start_rect_color = (blue) 
    stop_rect_color = (blue)
    
    # Ellipses
    ellipse_rect_left = pygame.Rect(25, 40, 200, 200)
    pygame.draw.ellipse(screen, left_ellipse_color, ellipse_rect_left, 0)  # Use dynamic color
    ellipse_rect_right = pygame.Rect(580, 40, 200, 200)
    pygame.draw.ellipse(screen, right_ellipse_color, ellipse_rect_right, 0)  # Use dynamic color
    ellipse_rect_go = pygame.Rect(230, 180, 330, 200)
    pygame.draw.ellipse(screen, go_ellipse_color, ellipse_rect_go, 0)

    # Rest Rectangle
    rest_rect = pygame.Rect(250, 440, 300, 140)
    pygame.draw.rect(screen, rest_rect_color, rest_rect, 0)  # Use dynamic color

    #Start button
    start_rect = pygame.Rect(660, 0, 52, 27)
    pygame.draw.rect(screen, start_rect_color, start_rect, 0)
    
    #Stop button
    stop_rect = pygame.Rect(720, 0, 52, 27)
    pygame.draw.rect(screen, stop_rect_color, stop_rect, 0)

    # Lines
    arrow_color_l = (250, 250, 250)
    start_pos_l = (40, 133)
    end_pos_l = (170, 133)
    pygame.draw.line(screen, arrow_color_l, start_pos_l, end_pos_l, 30)
    draw_arrowhead_l(screen, (250, 250, 250), (190, 133), (210, 133), 50)

    arrow_color_r = (250, 250, 250)
    start_pos_r = (620, 133)
    end_pos_r = (760, 133)
    pygame.draw.line(screen, arrow_color_r, start_pos_r, end_pos_r, 30)
    draw_arrowhead_r(screen, (250, 250, 250), (480, 133), (590, 133), 50)


    # Text color logic

    show_text(screen, "GO", (330, 250))
    show_text(screen, "REST", (295, 470))
    show_buttons_text(screen, "Start", (663, 3))
    show_buttons_text(screen,"Stop", (724, 3))

    pygame.display.flip()


def runPyGame():
    pygame.init()
    width, height = 800, 600
    screen = pygame.display.set_mode((width, height))
    pygame.display.set_caption("Data Collection UI")
    clock = pygame.time.Clock()
    fps = 60.0

    while True:
        dt = clock.tick(fps) / 1000.0  # Convert milliseconds to seconds
        update(dt)
        draw(screen)

if __name__ == "__main__":
    runPyGame()
